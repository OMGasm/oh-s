// oh-s
// Copyright (C) 2025  OMGasm
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

const font_width = 53;
const font_height = 43;
const font_flags = 0; // BLIT_1BPP
const font = [285]u8{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xce, 0x4e, 0x46, 0x54, 0x45, 0x5c, 0x6a, 0xae, 0xae, 0xee, 0xb7, 0x6a, 0xe3, 0x13, 0x75, 0x11, 0x51, 0xbb, 0x37, 0x1a, 0xab, 0xab, 0xba, 0xad, 0xda, 0xba, 0xd4, 0xe4, 0xe5, 0xcd, 0x44, 0xd4, 0x57, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xb3, 0x13, 0x91, 0x55, 0x55, 0x51, 0x8a, 0xaa, 0xab, 0xda, 0xaa, 0xaa, 0xed, 0x54, 0x64, 0xee, 0xd5, 0x46, 0xc6, 0xea, 0xaf, 0xab, 0xb6, 0xaa, 0x2b, 0x6f, 0x5b, 0x7d, 0x53, 0xb1, 0xbb, 0x5b, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0x7f, 0xff, 0xee, 0xff, 0xff, 0x6f, 0x3b, 0x73, 0x7f, 0xfe, 0xff, 0xf5, 0x37, 0x91, 0xb1, 0x5b, 0xb5, 0xb1, 0x8a, 0xba, 0xb8, 0xe8, 0xdd, 0x9d, 0x8d, 0x46, 0x6e, 0x6e, 0xd6, 0xdd, 0x6d, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xdb, 0x9d, 0xff, 0xaf, 0xf9, 0xcc, 0x55, 0x4d, 0xc5, 0x54, 0x55, 0x6e, 0xaa, 0x72, 0xf7, 0x6a, 0xa3, 0x76, 0xf5, 0x17, 0xd7, 0x3b, 0x1b, 0xb5, 0xb3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x4c, 0x45, 0x44, 0x44, 0x47, 0xe4, 0xeb, 0x7b, 0xaa, 0xef, 0xaa, 0xbf, 0x77, 0x5b, 0x11, 0x11, 0x1d, 0x11, 0xfb, 0xba, 0xdb, 0xee, 0xea, 0xea, 0xef, 0xdd, 0xc4, 0x44, 0x74, 0x47, 0x44, 0x46, 0x4f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xbb, 0x59, 0x7b, 0xbf, 0xbf, 0x93, 0xed, 0xa8, 0x9e, 0xaa, 0xdb, 0xfd, 0xdf, 0x6d, 0xd6, 0xef, 0xcd, 0x5c, 0x5f, 0x7b, 0xf2, 0x32, 0xfe, 0xf6, 0xff, 0x77, 0xbb, 0xf5, 0x3d, 0xfd, 0xfb, 0xf9, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0x6f, 0xfe, 0xf5, 0xff, 0xff, 0xff, 0xab, 0x77, 0x77, 0x76, 0x3f, 0xfd, 0x7b, 0xff, 0xff, 0xf7, 0xdf, 0xfd, 0xdd, 0xff, 0xfd, 0xdd, 0xdd, 0x8e, 0xdd, 0xf6, 0xff, 0xfd, 0xef, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe };

const w4 = @import("wasm4.zig");

pub fn char(c: u8, x: i32, y: i32) !void {
    const map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_[])!@#$%^&*(-{}.,/\\?\"':;|<>=";
    const i = for (map, 0..) |m, i| {
        if (c == m) {
            break i;
        }
    } else {
        return error.NotFound;
    };
    const X = i % 13;
    const Y = i / 13;

    w4.blitSub(&font, x, y, 3, 5, 1 + 4 * X, 1 + 6 * Y, font_width, font_flags);
}

pub const Wrap = enum {
    none,
    normal,
    hyphenate,
};

pub const Align = union(enum) {
    left,
    center: struct { width: u8 },
    right: struct { width: u8 },
};

pub const Options = struct {
    spacing: u5 = 1,
    vspacing: u5 = 1,
    wrap: Wrap = .none,
    alignment: Align = .left,
    justify: bool = false,
    max_width: u8 = 160,
    max_height: u8 = 160,
};

pub fn text(str: []const u8, x: i32, y: i32, opts: Options) void {
    const w = 3 + opts.spacing;
    const h = 5 + opts.vspacing;

    var y2 = y;
    var x2 = x;
    loop: for (str) |c| {
        switch (c) {
            '\n' => {
                x2 = x;
                y2 += h;
            },
            else => {
                char(c, x2, y2) catch {};
                x2 += w;
                switch (opts.wrap) {
                    .none => {
                        if (x2 > x + opts.max_width) {
                            break :loop;
                        }
                    },
                    .normal => {
                        if (x2 > x + opts.max_width) {
                            y2 += h;
                            x2 = x;
                        }
                    },
                    .hyphenate => {},
                }
            },
        }
        if (y2 > opts.max_height + y - h) {
            break;
        }
    }
}
